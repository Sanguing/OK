import random
import numpy as np


def read_from_file(file_name):
    data = []
    with open(file_name) as f:
        while True:
            line = list(map(int, f.readline().split()))
            data.append(line)
            if not line:
                break
    f.close()
    del data[0]
    del data[-1]
    return data


def write_to_file(file_name, results):
    f = open(file_name, 'w')
    for a in results:
        a = str(a)
        f.write(a + '\n')
    f.close()


def find_shortest_and_length(data, starting_id, route):

    index = starting_id
    length = 9e+40
    for i in range(points_amount):
        if i == starting_id or data[i] == 1:
            pass
        else:
            dist = pow(pow(base[starting_id][0] - base[i][0], 2) + pow(base[starting_id][1] - base[i][1], 2), 1/2)
            if dist < length:
                index = i
                length = dist

    data[index] = 1
    route.append(starting_id + 1)

    if length != 9e+40:
        return index, length
    else:
        return index, 0


# changeable for optimization
base = read_from_file("berlin52.txt")
evaporate_rate = .2                     # initial pheromone * (1 - evaporate_rate)
pheromone_factor = 1e4                  # modifying for finer pheromone values
visibility_factor = 1                   # used in modifying distance into initial pheromone level
iteration_amount = 100                  # this or criteria condition ends stating pheromone levels
ants_amount = len(base)                 # for easier code reading
points_amount = len(base)               # for easier code reading

all_distances = []
all_routes = []


def greed_algorithm():

    indice = 0
    route = []
    distance = 0

    is_it_taken = [0] * points_amount
    is_it_taken[0] = 1

    for i in range(points_amount):
        indice, l = find_shortest_and_length(is_it_taken, indice, route)
        distance += l

    # come back to last point
    route.append(1)
    distance += pow(pow(base[indice][0] - base[0][0], 2) + pow(base[indice][1] - base[0][1], 2), 1/2)
    print('Distance of greed algorith equals: ', distance, '\nthe route looks in a following way: ', route)
    return route


def pheromone_init():
    distance_array = []
    for i in range(points_amount):
        k = []
        for j in range(points_amount):
            k.append(pow(pow(base[i][0] - base[j][0], 2) + pow(base[i][1] - base[j][1], 2), (1/2)))
        distance_array.append(k)

    pheromone_array = [[x * (1/pheromone_factor) for x in y] for y in distance_array]
    for i in range(points_amount):
        for j in range(points_amount):
            if pheromone_array[i][j] != 0:
                pheromone_array[i][j] = visibility_factor / pheromone_array[i][j]
            else:
                pheromone_array[i][j] = -1

    return pheromone_array, distance_array


def ant_colony():

    pheromones, distances = pheromone_init()
    t = 0

    while t < iteration_amount:        # insert criteria condition - ASK during class !!!!!!
        t += 1

        # ant route initialization

        ants_route = np.zeros((ants_amount, points_amount + 1))
        for i in range(ants_amount):
            ants_route[i:, 0] = i + 1
            ants_route[i:, points_amount] = i + 1

        # ant route construction based on pheromone rate

        for i in range(ants_amount):
            for j in range(1, points_amount):
                id = np.argmax(pheromones[int(ants_route[i][j-1]) - 1])
                pom = []
                while id + 1 in ants_route[i]:
                    pom.append((max(pheromones[int(ants_route[i][j - 1]) - 1]), id))
                    pheromones[int(ants_route[i][j-1]) - 1][id] = -1
                    id = np.argmax(pheromones[int(ants_route[i][j - 1]) - 1])
                ants_route[i][j] = id + 1
                while pom:
                    pheromones[int(ants_route[i][j - 1]) - 1][pom[-1][1]] = pom[-1][0]
                    del pom[-1]

        # pheromone evaporating

        for i in range(points_amount):
            for j in range(points_amount):
                if pheromones[i][j] > 0:
                    pheromones[i][j] *= (1 - evaporate_rate)

        # positive pheromone intensity update using SACO method

        for i in range(ants_amount):
            suma = 0
            for j in range(1, points_amount + 1):
                suma += distances[int(ants_route[i][j] - 1)][int(ants_route[i][j-1] - 1)]
                pheromones[int(ants_route[i][j] - 1)][int(ants_route[i][j-1] - 1)] += (pheromone_factor / suma)
            all_distances.append(suma)
            all_routes.append(ants_route[i])

    print('Min distance: ', min(all_distances), ', max distance: ', max(all_distances))


def main():
    greed_algorithm()
    print()
    ant_colony()


main()


# Notes:
# Add randomizer between n most pheromone-rich nodes ? (preferably new function ?) def ant_colony_random or smth
# Find math / logical error in code (computations with wrong outcome)
# Ask about ending criteria
